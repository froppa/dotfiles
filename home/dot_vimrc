" ========================
" === Plugin Manager ===
" ========================
runtime! archlinux.vim
call plug#begin('~/.vim/plugged')

" ========================
" === Plugin List ===
" ========================
Plug 'airblade/vim-gitgutter'
Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': 'fzf#install()' }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vista.vim'
Plug 'majutsushi/tagbar'
Plug 'preservim/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'joshdick/onedark.vim'
call plug#end()

" ========================
" === General Settings ===
" ========================
set autoread hidden nobackup nowritebackup noswapfile
set backspace=eol,start,indent whichwrap+=<,>,h,l
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

au FocusGained,BufEnter * silent! checktime

" ========================
" === UI Settings ===
" ========================
set number relativenumber cursorline showcmd
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab autoindent smartindent
set wrap foldenable foldlevelstart=10 foldnestmax=10
set cmdheight=1 laststatus=2 wildmenu lazyredraw showmatch hlsearch incsearch
set ignorecase smartcase
set ruler magic mat=2
set clipboard=unnamed encoding=UTF-8
set noshowmode
set guifont=DroidSansMono\ Nerd\ Font\ 11
colorscheme onedark
hi Normal guibg=NONE ctermbg=NONE

" ========================
" === Mappings ===
" ========================
let mapleader = ","
nmap <leader>w :w!<CR>
nmap <leader>x :wq!<CR>
command! W execute 'silent! write !sudo tee % > /dev/null' | edit

nnoremap <leader><space> :nohlsearch<CR>
nnoremap <space> za
nnoremap j gj
nnoremap k gk
nnoremap <F4> :NERDTreeToggle<CR>
nnoremap <F3> :NERDTreeFocus<CR>
nnoremap <leader>z :FZF<CR>
nnoremap <leader>u :GundoToggle<CR>
nnoremap <leader>a :Ag
nnoremap < :tabprevious<CR>
nnoremap > :tabnext<CR>
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
map <leader>q :e ~/buffer<cr>
map <leader>x :e ~/buffer.md<cr>

" ========================
" === Plugin Configs ===
" ========================

" fzf
let g:fzf_colors = { 'fg': ['fg', 'Normal'], 'bg': ['bg', 'Normal'], 'hl': ['fg', 'Comment'], 'fg+': ['fg', 'CursorLine'], 'bg+': ['bg', 'CursorLine'], 'hl+': ['fg', 'Statement'], 'info': ['fg', 'PreProc'], 'prompt': ['fg', 'Conditional'], 'pointer': ['fg', 'Exception'], 'marker': ['fg', 'Keyword'], 'spinner': ['fg', 'Label'], 'header': ['fg', 'Comment'] }

" ctrlp
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:webdevicons_enable_ctrlp = 1

" nerdtree
let g:NERDTreeMinimalUI = 1
let g:NERDTreeWinPos = 'left'
let g:NERDTreeWinSize = 20
let g:NERDTreeStatusline = "  "
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" gitgutter
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '*'
let g:gitgutter_sign_removed = '-'
nmap ]c <Plug>GitGutterNextHunk
nmap [c <Plug>GitGutterPrevHunk
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk

" ale
let g:ale_set_signs = 1
let g:ale_sign_error = '> '
let g:ale_sign_warning = '! '
let b:ale_linters = ['pyflakes', 'flake8', 'pylint']
let b:ale_fixers = ['eslint']
let b:ale_fix_on_save = 1
hi ALEErrorSign ctermfg=01 ctermbg=00
hi ALEWarningSign ctermfg=06 ctermbg=00

" lightline
let g:lightline = {
  \ 'colorscheme': 'purify',
  \ 'active': {
  \   'left': [['mode', 'paste'], ['readonly', 'filename', 'modified']],
  \   'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']] },
  \ 'component_function': {
  \   'filetype': 'MyFiletype',
  \   'fileformat': 'MyFileformat' }
  \ }

" ========================
" === Autocommands ===
" ========================
augroup configgroup
  autocmd!
  autocmd VimEnter * highlight clear SignColumn
  autocmd FileType ruby,python setlocal tabstop=2 shiftwidth=2 softtabstop=2 commentstring=#\ %s
  autocmd BufEnter *.cls setlocal filetype=java
  autocmd BufEnter *.zsh-theme setlocal filetype=zsh
  autocmd BufEnter Makefile setlocal noexpandtab
  autocmd BufEnter *.sh setlocal tabstop=2 shiftwidth=2 softtabstop=2
augroup END

augroup nerdtree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END

augroup nerdtreehidecwd
  autocmd!
  autocmd FileType nerdtree setlocal conceallevel=3
        \ | syntax match NERDTreeHideCWD #^[</].*$# conceal
        \ | setlocal concealcursor=n
augroup END

" ========================
" === Functions ===
" ========================
function! ToggleNumber()
  if &relativenumber
    set norelativenumber number
  else
    set relativenumber
  endif
endfunction

function! HasPaste()
  return &paste ? 'PASTE MODE  ' : ''
endfunction

function! CleanExtraSpaces()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

if has("autocmd")
  autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee call CleanExtraSpaces()
endif

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute "bdelete! " . l:currentBufNum
  endif
endfunction

function! CmdLine(str)
  call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' ")
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/' . l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
